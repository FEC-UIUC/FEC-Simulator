import jsonimport sysimport tracebackimport websocketimport copyimport math___action_map = {    0: "filled",    1: "partially filled",    2: "resting",    3: "canceled"}if __name__ == "__main__":	try:		_parameters = json.loads(sys.argv[1])		for p in _parameters:			parameters[p] = _parameters[p]		_username = sys.argv[2]				___sessionID = None		_algoID = int(sys.argv[3])		___setNextOrderID(_algoID * 1000000)		globals = {}		initialize(globals)		_orders = {}		data = {}		_last_new_sym = None		_update_sym = None		def on_message(ws, message):			global _last_new_sym, _update_sym			msg = ___parseMessage(message)			if msg["message_type"] == "quote":				sym = msg["symbol"]				if not sym in data:					data[sym] = {}					data[sym]["paid"] = 0					data[sym]["pnl"] = 0					data[sym]["position"] = 0					_last_new_sym = sym				elif _update_sym is None:					_update_sym = _last_new_sym				data[sym]["bid_price"] = int(msg["bid_price"])				data[sym]["ask_price"] = int(msg["ask_price"])				data[sym]["last_price"] = int(msg["last_price"])				data[sym]["bid_qty"] = int(msg["bid_qty"])				data[sym]["ask_qty"] = int(msg["ask_qty"])				# check if we are processing the symbol that marks time for an update				# all other symbols were processed at this tick				if sym == _update_sym:					handle_data(globals, copy.deepcopy(data), copy.deepcopy(_orders))					msg = {						"message_type": "algo-status", 						"status": "running",						"pnl": sum([data[sym]["pnl"] for sym in data]),						"algoID": _algoID,						"sessionID": ___sessionID					}					_sim_ws.send(___formatMessage(msg))			elif msg["message_type"] == "order":				orderID = msg["orderID"]				sym = msg["symbol"]				filled = int(msg["filled"])				if not orderID in _orders:					_orders[orderID] = {}				_orders[orderID]["remaining"] = int(msg["remaining"])				_orders[orderID]["filled"] = _orders[orderID].get("filled", 0) + int(math.fabs(filled))				data[sym]["paid"] += int(msg["money"])				data[sym]["position"] += filled				_orders[orderID]["status"] = int(msg["action"])				data[sym]["pnl"] = data[sym]["position"] * data[sym]["last_price"] - data[sym]["paid"]				___addMoney(int(msg["money"]))				if filled > 0:					price = int(msg["money"])/filled					price = int(math.fabs(price))				else:					price = int(msg["price"])				action = ___action_map[int(msg["action"])]				___onOrderConfirm(globals, copy.deepcopy(data), copy.deepcopy(_orders), orderID, price, filled, action)			elif msg["message_type"] == "cancel":				if int(msg["success"]) == 1:					orderID = int(msg["orderID"])					_orders[orderID]["status"] = 3					_orders[orderID]["remaining"] = 0								elif msg["message_type"] == "new_user":				global ___money, ___sessionID				___money = int(msg["money"])				___sessionID = msg["sessionID"]							elif msg["message_type"] == "stop":				# send final data update				msg = {					"message_type": "algo-status", 					"status": "running",					"pnl": sum([data[sym]["pnl"] for sym in data]),					"algoID": _algoID,					"sessionID": ___sessionID				}				_sim_ws.send(___formatMessage(msg))				exit()						def on_error(ws, error):			print error		def on_close(ws):			print "### closed ###"		def on_open(ws):			ws.send("message_type=new_algo|username=" + _username + "id=" + str(_algoID))		websocket.enableTrace(True)		_sim_ws = websocket.WebSocketApp("ws://localhost:8080/Simulator/server",										 on_message=on_message,										 on_error=on_error,										 on_close=on_close)		_sim_ws.on_open = on_open		_sim_ws.run_forever()	except:		# send final data update		msg = {			"message_type": "algo-status", 			"status": "running",			"pnl": sum([data[sym]["pnl"] for sym in data]),			"algoID": _algoID,			"sessionID": ___sessionID		}		_sim_ws.send(___formatMessage(msg))				# send error status update		msg = {			"message_type": "algo-status", 			"status": "error",			"algoID": _algoID,			"sessionID": ___sessionID		}		_sim_ws.send(___formatMessage(msg))				traceback.print_exc(file=sys.stdout)			