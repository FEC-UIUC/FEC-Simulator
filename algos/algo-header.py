import jsonimport sysimport websocketimport copyimport mathdef ___parseMessage(msg_str):    result = {}    msg_split = msg_str.split("|")    for pair in msg_split:        k, v = pair.split("=", 1)        result[k] = v    return resultdef ___formatMessage(msg_map):    result = ""    for k in msg_map:        result += k + "=" + str(msg_map[k]) + "|"    return result[:-1]___money = 0def getMoney():    return ___moneydef ___addMoney(amt):    global ___money    ___money += amt___next_orderID = 0def ___getNextOrderID():    global ___next_orderID    ___next_orderID += 1    return ___next_orderIDdef ___setNextOrderID(val):    global ___next_orderID    ___next_orderID = val - 1def order(symbol, quantity, price=0, order_type='limit'):    global _sim_ws    if order_type != 'market' and not price:        raise Exception("Must give a price for non-market orders.")    side = "0" if quantity > 0 else "1"    if order_type == 'limit':        otype = "1"    elif order_type == 'market':        otype = "0"    else:        raise Exception("Unknown order type")    oid = ___getNextOrderID()    message = {        "message_type": "order",        "symbol": symbol,        "price": str(int(price*100)),        "side": side,        "quantity": int(math.fabs(quantity)),        "order_type": otype,        "orderID": str(oid)    }    _sim_ws.send(___formatMessage(message))    return oiddef cancel(orderID):	global _sim_ws	message = {        "message_type": "cancel",        "orderID": orderID    }	_sim_ws.send(___formatMessage(message));def ___onOrderConfirm(globals, data, orders, orderID, price, filled, action):    try:        onOrderConfirm(globals, data, orders, orderID, price, filled, action)    except Exception as e:        print e'''''''''''''''''''''''''''user code goes below here'''''''''''''''''''''''''''
